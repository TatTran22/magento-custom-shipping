<?php


namespace TatTran\ShippingG\Model;


use Magento\Framework\Xml\Security;
use Magento\Quote\Model\Quote\Address\RateRequest;
use Magento\Ups\Helper\Config;

class Carrier extends \Magento\Shipping\Model\Carrier\AbstractCarrierOnline implements \Magento\Shipping\Model\Carrier\CarrierInterface
{
    const CODE = 'tattranshippingg';
    protected $_code = self::CODE;
    protected $_request;
    protected $_result;
    protected $_baseCurrentRate;
    protected $_xmlAccessRequest;
    protected $_localeFormat;
    protected $_logger;
    protected $configHelper;
    protected $_errors = [];
    protected $_isFixed = true;

    public function __construct(\Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
                                \Magento\Quote\Model\Quote\Address\RateResult\ErrorFactory $rateErrorFactory,
                                \Psr\Log\LoggerInterface $logger,
                                Security $xmlSecurity,
                                \Magento\Shipping\Model\Simplexml\ElementFactory $xmlElFactory,
                                \Magento\Shipping\Model\Rate\ResultFactory $rateFactory,
                                \Magento\Quote\Model\Quote\Address\RateResult\MethodFactory $rateMethodFactory,
                                \Magento\Shipping\Model\Tracking\ResultFactory $trackFactory,
                                \Magento\Shipping\Model\Tracking\Result\ErrorFactory $trackErrorFactory,
                                \Magento\Shipping\Model\Tracking\Result\StatusFactory $trackStatusFactory,
                                \Magento\Directory\Model\RegionFactory $regionFactory,
                                \Magento\Directory\Model\CountryFactory $countryFactory,
                                \Magento\Directory\Model\CurrencyFactory $currencyFactory,
                                \Magento\Directory\Helper\Data $directoryData,
                                \Magento\CatalogInventory\Api\StockRegistryInterface $stockRegistry,
                                \Magento\Framework\Locale\FormatInterface $localeFormat,
                                Config $configHelper,
                                array $data = [])
    {
        $this->_localeFormat = $localeFormat;
        $this->configHelper = $configHelper;
        parent::__construct(
            $scopeConfig,
            $rateErrorFactory,
            $logger,
            $xmlSecurity,
            $xmlElFactory,
            $rateFactory,
            $rateMethodFactory,
            $trackFactory,
            $trackErrorFactory,
            $trackStatusFactory,
            $regionFactory,
            $countryFactory,
            $currencyFactory,
            $directoryData,
            $stockRegistry,
            $data);
    }

    /**
     * @inheritDoc
     */
    public function collectRates(RateRequest $request)
    {
        if (!$this->getConfigFlag('active')) {
            return false;
        }

        /** @var \Magento\Shipping\Model\Rate\Result $result */
        $result = $this->_rateFactory->create();

        /*store shipping in session*/
        /** @var \Magento\Quote\Model\Quote\Address\RateResult\Method $method */
        $method = $this->_rateMethodFactory->create();
        $method->setCarrier($this->_code);
        $method->setCarrierTitle($this->getConfigData('title'));

        /*Use method name*/
        $method->setMethod($this->_code);
        $method->setMethodTitle($this->getConfigData('name'));

        $shippingCost = (float)$this->getConfigData('shipping_cost');

        $method->setPrice($shippingCost);
        $result->append($method);
        return $result;
    }

    public function proccessAdditionalValidation(\Magento\Framework\DataObject $request): bool
    {
        return true; // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function _doShipmentRequest(\Magento\Framework\DataObject $request)
    {
        // TODO: Implement _doShipmentRequest() method.
    }

    /**
     * @inheritDoc
     */
    public function getAllowedMethods()
    {
        return [$this->_code => $this->getConfigData('name')];
    }
}
